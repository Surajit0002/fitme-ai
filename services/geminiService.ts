import { GoogleGenAI, Modality } from "@google/genai";

const fileToGenerativePart = (file: File) => {
  return new Promise<{ mimeType: string; data: string }>((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      if (typeof reader.result !== 'string') {
        return reject(new Error('Failed to read file as string'));
      }
      const result = reader.result.split(',')[1];
      resolve({
        mimeType: file.type,
        data: result,
      });
    };
    reader.onerror = (err) => reject(err);
    reader.readAsDataURL(file);
  });
};

export const generateTryOnImage = async (
  personImage: File,
  productImages: File[]
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
  
  const personPart = await fileToGenerativePart(personImage);
  const productParts = await Promise.all(productImages.map(fileToGenerativePart));

  const textPrompt = {
    text: `**TASK: VIRTUAL TRY-ON - ITEM PLACEMENT ONLY**

**PRIMARY GOAL:** Realistically place the provided clothing/accessory items onto the person in the first image.

**INPUTS:**
*   **IMAGE 1 (CANVAS):** The original photo of a person.
*   **IMAGE 2+ (ITEMS):** The products to be placed on the person.

**NON-NEGOTIABLE RULES:**

1.  **DO NOT CHANGE THE PERSON:** The person in the CANVAS image (face, body, pose, skin tone, hair) must remain **100% IDENTICAL** in the output. Do not generate a new person or alter their features in any way. This is the most important rule.
2.  **DO NOT CHANGE THE BACKGROUND:** The background of the CANVAS image must remain **100% IDENTICAL**. Do not add, remove, or alter any background elements.
3.  **ONLY ADD ITEMS:** Your *only* task is to add the ITEMS onto the person in the CANVAS image. Fit the items to the person's pose, not the other way around.

**OUTPUT:** The final image must be the original CANVAS image, with only the ITEMS added. Any changes to the original person or background are a failure.`
  };

  const imageParts = [
    { inlineData: personPart },
    ...productParts.map(part => ({ inlineData: part }))
  ];

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [ ...imageParts, textPrompt ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error('No image was generated by the AI.');
  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    throw new Error("Failed to generate AI try-on image.");
  }
};
